import streamlit as st
import urllib.parse
import json, base64

st.set_page_config(page_title="XPL√òR QR", page_icon="üåê", layout="centered")

# üåà Modern Futuristic Style for Competition
st.markdown("""
<style>
html, body, [class*="css"] {
    background: linear-gradient(135deg, #e3f2fd, #ffffff);
    font-family: 'Segoe UI', sans-serif;
    color: #1a237e;
}
h1 {
    text-align: center;
    font-size: 52px;
    font-weight: 800;
    color: #0d47a1;
    text-shadow: 2px 2px 10px rgba(13, 71, 161, 0.2);
    margin-top: 25px;
    letter-spacing: 1px;
}
h3, h4 {
    text-align: center;
    color: #01579b;
    font-weight: 600;
    margin-bottom: 8px;
}
.divider {
    height: 4px;
    width: 80px;
    background: linear-gradient(90deg, #0288d1, #26c6da);
    margin: 20px auto;
    border-radius: 2px;
}
.xplor-button {
    display: block;
    width: 100%;
    background: linear-gradient(135deg, #0288D1, #26C6DA);
    color: white !important;
    padding: 18px;
    margin: 12px 0;
    border: none;
    border-radius: 40px;
    font-size: 20px;
    font-weight: 700;
    letter-spacing: 0.5px;
    text-align: center;
    transition: all 0.3s ease;
    text-decoration: none;
    box-shadow: 0 6px 20px rgba(0,0,0,0.15);
}
.xplor-button:hover {
    background: linear-gradient(135deg, #0277BD, #00BCD4);
    transform: scale(1.08);
    box-shadow: 0 10px 30px rgba(0,0,0,0.25);
}
.fade-in {
    animation: fadeIn 1.5s ease-in;
}
@keyframes fadeIn {
    from {opacity: 0; transform: translateY(15px);}
    to {opacity: 1; transform: translateY(0); opacity: 1;}
}
.footer {
    text-align: center;
    color: #37474f;
    margin-top: 50px;
    font-size: 15px;
}
.flag {
    width: 26px;
    vertical-align: middle;
}
</style>
""", unsafe_allow_html=True)

# ‚úÖ Updated function for Streamlit >= 1.33
params = st.query_params

# üöÄ Get encoded payload from robot (?data=)
payload_data = params.get("data", None)

# üß© Decode payload sent by XPL√òRBOT
if payload_data:
    try:
        padded = payload_data + "=" * (-len(payload_data) % 4)
        decoded = json.loads(base64.urlsafe_b64decode(padded.encode()).decode())

        category = decoded.get("category", "Tourist attractions")
        subcategory = decoded.get("subcategory", "")
        suggestions = decoded.get("suggestions", [])
    except Exception:
        st.error("‚ö†Ô∏è Invalid QR data. Please scan again.")
        st.stop()
else:
    st.warning("‚ö†Ô∏è Please scan the QR code generated by XPL√òRBOT to view your recommendations.")
    st.stop()

# üß≠ Same recommendation data as the robot
SUGGESTIONS = {
    "Museums": ["Biomuseum", "Canal Museum", "Museum of Contemporary Art"],
    "Restaurants": ["Seafood Market", "Tantalo", "Maito", "Fonda Lo Que Hay"],
    "Nature": ["Metropolitan Park", "Taboga Island", "Coiba National Park", "Boquete"],
    "Shopping malls": ["Multiplaza", "Albrook Mall", "Metromall", "Soho Mall"],
    "Budget": ["Hostel Loco Coco Loco", "Hotel Centroamericano", "Hotel Marparaiso"],
    "Luxury": ["Hotel Las Am√©ricas", "W Panama", "Trump Tower"],
    "Downtown": ["Hotel El Panam√°", "Hotel Riu", "Hotel Marbella"],
    "With pool": ["Sortis Hotel", "Hotel Crowne Plaza", "Bristol Panama"],
    "Taxi": ["Uber", "Cabify", "Panamanian Taxis"],
    "Metro": ["Line 1", "Line 2", "MetroBus Recharges"],
    "Car rental": ["Thrifty", "Hertz", "Dollar Rent A Car"],
    "Ride-sharing apps": ["Uber", "InDrive", "Cabify"],
    "Hospital": ["Punta Pac√≠fica Hospital", "National Hospital", "Santo Tom√°s Hospital"],
    "Police": ["National Police", "DIJ", "Emergency 104"],
    "Embassy": ["US Embassy", "French Embassy", "Colombian Embassy"],
    "Pharmacy": ["Arrocha", "Metro Plus", "El Javillo"]
}

# üñ•Ô∏è Header - Strong visual identity
st.markdown("<h1 class='fade-in'>XPL√òRBOT</h1>", unsafe_allow_html=True)
st.markdown("<div class='divider'></div>", unsafe_allow_html=True)

st.markdown(f"<h3>Welcome to Panama</h3>", unsafe_allow_html=True)
st.markdown(f"<h4>Category: <b>{category}</b></h4>", unsafe_allow_html=True)
if subcategory:
    st.markdown(f"<h4>Topic: <b>{subcategory}</b></h4>", unsafe_allow_html=True)

st.markdown("<div class='divider'></div>", unsafe_allow_html=True)

# üåü Recommendations section
if suggestions:
    st.markdown("<h3 class='fade-in'>Recommended Places</h3>", unsafe_allow_html=True)
    for place in suggestions:
        url = f"https://www.google.com/search?q={urllib.parse.quote(place + ' Panama')}"
        st.markdown(f"<a class='xplor-button fade-in' href='{url}' target='_blank'>{place}</a>", unsafe_allow_html=True)
else:
    fallback = SUGGESTIONS.get(subcategory, [])
    if fallback:
        st.markdown("<h3>Recommended Places</h3>", unsafe_allow_html=True)
        for place in fallback:
            url = f"https://www.google.com/search?q={urllib.parse.quote(place + ' Panama')}"
            st.markdown(f"<a class='xplor-button fade-in' href='{url}' target='_blank'>{place}</a>", unsafe_allow_html=True)
    else:
        st.info("No recommendations available. Please rescan your QR.")

# üåç Footer
st.markdown("""
<div class='footer'>
    XPL√òR ¬© 2025 ‚Äì Made in Panama 
    <img class='flag' src='https://upload.wikimedia.org/wikipedia/commons/a/ab/Flag_of_Panama.svg'>
</div>
""", unsafe_allow_html=True)
